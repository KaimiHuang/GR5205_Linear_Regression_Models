# -*- coding: utf-8 -*-
"""Life Expectancy

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VKYWrmtT0aJCY9DHvij8P-dV9d5Py8xC
"""

from google.colab import drive
 drive.mount('/content/drive')

import os

os.chdir('/content/drive/My Drive/GR5205 GU4205 Linear Regression Models Team Project')
os.getcwd()

from glob import glob
glob('./*')

import pandas as pd
import statsmodels.api as sm
import seaborn as sns
import matplotlib.pyplot as plt
from statsmodels.stats.stattools import jarque_bera, durbin_watson
from statsmodels.stats.diagnostic import het_breuschpagan
from statsmodels.stats.outliers_influence import variance_inflation_factor
import numpy as np
from sklearn.metrics import mean_squared_error,r2_score


cs_df = pd.read_csv('./life_expectancy.csv')
cs_df = cs_df.dropna()
#predictors
X = cs_df[[ 
           'Adult_mortality',
           'Alcohol_consumption',


           'Incidents_HIV',

           'Population_mln',
]]
         
#response    
response = 'Life_expectancy'
y = cs_df[response]

#simple linear regression
predictor_slr = 'Adult_mortality'
X_slr = X[predictor_slr]
X_slr_ac = sm.add_constant(X_slr)
model_slr = sm.OLS(y, X_slr_ac).fit()
print(model_slr.summary())
residuals_slr = model_slr.resid
fitted_values_slr = model_slr.fittedvalues

sns.pairplot(X,diag_kind='hist')
plt.show()

#multiple linear regression
X_ac = sm.add_constant(X)
model_mlr = sm.OLS(y, X_ac).fit()
print(model_mlr.summary())
residuals_mlr = model_mlr.resid
fitted_values_mlr = model_mlr.fittedvalues

sd_function = sm.OLS(abs(residuals_mlr), sm.add_constant(fitted_values_mlr)).fit()
fitted_values_sd_function = sd_function.fittedvalues

#plot the standard deviation function
plt.figure(figsize=(5, 4)) # (width, height)
sns.scatterplot(x=fitted_values_mlr, y=abs(residuals_mlr), alpha=0.75) # alpha for transparency
plt.plot(fitted_values_mlr, fitted_values_sd_function, color = 'red')
plt.title('Absolute Residuals vs Fitted Values', fontsize=18)
plt.xlabel('Fitted Values of Life Expectancy', fontsize=15)
plt.ylabel('Absolute Residuals', fontsize=15)
plt.legend()
plt.show()

#Multi WLS
weights=1/(fitted_values_sd_function)**2
myWLS=sm.WLS(y,X_ac,weights=weights).fit()
fitted_values_wls = myWLS.fittedvalues
residuals_wls = myWLS.resid
results=myWLS
print(results.summary())

#back test using 2014 data

cs_df_bt = pd.read_csv('./Life-Expectancy-Data-backtest.csv')
cs_df_bt = cs_df_bt.dropna()

#predictors
X_bt = cs_df_bt[[
           'Adult_mortality',
           'Alcohol_consumption',


           'Incidents_HIV',

           'Population_mln',
]]

#response
y_bt = cs_df_bt[response]

X_bt_ac = sm.add_constant(X_bt)

#OLS
y_pred_ols = model_mlr.predict(X_bt_ac)
mse_ols = mean_squared_error(y_bt,y_pred_ols)
r2_ols=r2_score(y_bt,y_pred_ols)
print("MSE ols:", mse_ols)
print("R-squared ols:", r2_ols)

#WLS
y_pred_wls = myWLS.predict(X_bt_ac)
mse_wls = mean_squared_error(y_bt,y_pred_wls)
r2_wls=r2_score(y_bt,y_pred_wls)
print("MSE wls:", mse_wls)
print("R-squared wls:", r2_wls)

#check linearity between residuals and fitted values
plt.figure(figsize=(5, 4)) # (width, height)
sns.scatterplot(x=fitted_values_mlr, y=residuals_mlr, alpha=0.75) # alpha for transparency
plt.title('Residuals vs Fitted Values', fontsize=18)
plt.xlabel('Fitted Values of Life Expectancy', fontsize=15)
plt.ylabel('Residuals', fontsize=15)
plt.show()

#check normality of residuals
#using Quantile-Quantile plot
fig = sm.qqplot(residuals_mlr, line='s')
plt.title('Q-Q Plot')
plt.show()

residuals_mlr_np = residuals_mlr.to_numpy()
sns.kdeplot(residuals_mlr_np.reshape(-1), shade=True)
plt.title('Probability Density Function of Residuals', fontsize=15)
plt.show()

jbtest = jarque_bera(residuals_mlr)
JB_test_sta = jbtest[0]
JB_test_p_value = jbtest[1]
JB_test_skewness = jbtest[2]
JB_test_kurtosis = jbtest[3]
print(f'Test Results: \
  Jarque-Bera Test Statistic: {JB_test_sta},\
  P-value: {JB_test_p_value},\
  Skewness: {JB_test_skewness},\
  Kurtosis: {JB_test_kurtosis}')

#check autocorrelation
dwtest = durbin_watson(residuals_mlr)
print(f'Durbin-Watson Test Statistic: {dwtest}')

# Run the Breusch-Pagan test to check homoscedasticity 
bptest = het_breuschpagan(residuals_mlr, X)
bptest_sta = bptest[0]
bptest_p_value = bptest[1]
print(f'Breusch-Pagan Test Statistic: {bptest_sta}, and P-value: {bptest_p_value}')

#check multicollinearity
sns.heatmap(X.corr(),mask=np.triu(X.corr()),annot=True, cmap='PiYG')
plt.show()


vif = [variance_inflation_factor(X.values,i)for i in range(X.shape[1])]
for ind,col in enumerate(X.columns):
    print(col,vif[ind])

